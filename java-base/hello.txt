
进行四川应急测绘智慧平台项目如期完成了项目的全部需求，并突破了服务容器化、物联网技术、高性能中间件等关键技术，首次在项目中应用新一代的maven+springboot+jpa的软件架构，推动团队的技术栈更新

在后期的贵州、广西和玉溪项目中均基于共性平台开发和复用，开发效率提升了50%

提高软件技术水平和开发产品质量，引入了持续集成和自动化测试的概念，带领团队搭建公司首个具备自动化测试和自动质量检查的持续集成系统，引入了缺陷跟踪和UI自动化测试技术，并打通各个系统形成一套完整的软件开发生态，不断改进软件基础设施和开发方法

丰富Scrum、看板等敏捷时间经验，具备10人以上的技术团队管理经验
强烈的自我驱动力，自律能力和持续学习能力，高度技术敏捷度



实现从前端数据收集、传输，到后端的数据存储、分析、评估和机巡业务的统一管理，


使用集合框架的好处
1、容量自増长；
2、提供了高性能的数据结构和算法，使编码更轻松，提高了程序的速度和质量;
3、可以方便地扩展或改写集合，提高代码可用性和可操作性。
4、通过使用JDK自带的集合类，可以降低代码维护和学习新API成本。


常用的集合类有哪些?
Map接口和Collection接口是所有集合框架的父接口:
1、Collection接口的子接口包括：Set接口和List接口
2、Map 接口的实现类主要有：HashMap. TreeMap. Hashtable,ConcurrentHashMap 以及 Properties 等
3、Set 接口的实现类主要有：HashSet、TreeSet、LinkedHashSet 等
4、List 接口的实现类主要有：ArrayList、LinkedList、Stack 以及 Vector 等


List, Set, Map三者的区别？
Java容器分为Collection和Map两大类，Collection集合的子接口有Set、 List、Queue三种子接口。我们比较常用的是Set、List, Map接口不是collection 的子接口。
Collection集合主要有List和Set两大接口
List: 一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以 重复，可以插入多个null元素，元素都有索引。常用的实现类有ArrayList、LinkedList 和 Vector
Set: 一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元 素，只允许存入f null元素，必须保证元素唯一性。Set接口常用实现类 是 HashSet、LinkedHashSet 以及 TreeSet
Map是一个键值对集合，存储键、值和之间的映射。Key无序，唯一；value不要求有序，允许重复。Map没有继承于Collection接口，从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象。
Map 的常用实HashMap、TreeMap、HashTable、LinkedHashMap、ConcurrentHashMap



集合框架底层数据结构
Collection
1.List
Arraylist: Object数组
Vector: Object 数组
LinkedList:双向循环链表
2.Set
HashSet （无序，唯一）:基于HashMap实现的，底层采用HashMap 来保存元素
LinkedHashSet: LinkedHashSet 继承与 HashSet,并且其内部是通过LinkedHashMap来实现的，有点类似于我们之前说的 LinkedHashMap其内部是基于Hashmap实现一样，不过还是有一 点点区别的。
TreeSet （有序，唯一）:红黑树（自平衡的排序二叉树）
Map
HashMap: JDK1.8之前HashMap由数组+链表组成的，数组是HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法“解决冲突）。JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值 （默认为8）时，将链表转化为红黑树，以减少搜索时间
LinkedHashMap: LinkedHashMap 继承自 HashMap,所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外， LinkedHashMap在上面结构的基础上，増加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。
HashTable:数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的
TreeMap:红黑树（自平衡的排序二叉树）


哪些集合类是线程安全的?
Vector:就比Arraylist多了个synchronized （线程安全），因为效率较低， 现在不太建议使用。
hashTable:就比hashMap多了个synchronized （线程安全），不建议使用。
ConcurrentHashMap:是Java 5中支持高并发、高吞吐量的线程安全HashMap 实现。它由Segment数组结构和HashEntry数组结构组成。Segment数组在 ConcurrentHashMap里扮演锁的角色，HashEntry则用于存储键値对数据。 —个 ConcurrentHashMap 里包含一个 Segment 数组，Segment 的结构和 HashMap类似,是一种数组和链表结构;一个Segment里包含一个 HashEntry 数组，每个HashEntry是一个链表结构的元素；每个Segment守护着一个HashEntry数组里的元素，当对HashEntry数组的数据进行修改时，必须首先获得它对应的Segment锁。（推荐使用）



Java集合的快速失败机制"fail-fast”?
是java集合的一种错误检测机制，当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。
例如：假设存在两个线程（线程1、线程2）,线程1通过lterator在遍历集合 A中的元素，在某个时候线程2修改了集合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常，从而产生 fail-fast 机制。
原因：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount变量。集合在被遍历期间如果内容发生变化，就会改变modCount 的值。每当迭代器使用hashNextO/next。遍历下一个元素之前，都会检测 modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。
解决办法：
1.在遍历过程中，所有涉及到改变modCount值得地方全部加上synchronized
2.使用 CopyOnWriteArrayList 来替换 ArrayList



怎么确保一个集合不能被修改?
可以使用 Collections. unmodifiableCollection(Collection c)方法来创建一个只读集合，这样改变集合的任何操作都会抛出Java. lang. UnsupportedOperationException 异常。
示例代码如下：
@Test
    public void  test(){
        List< String > list = new ArrayList<>();
        list. add("nxn");
        Collection<String> clist = Collections. unmodifiableCollection(list);
        clist.add("new");//运行时此行报错
        System.out.println(list.size());
    }



迭代器Iterator是什么？
Iterator接口提供遍历任何Collection的接口。我们可以从一个 Collection 中使用迭代器方法来获取迭代器实例。迭代器取代了 Java集合框架中的 Enumeration,迭代器允许调用者在迭代过程中移除元素。
因为所有Collection接=接口继承了 Iterator迭代器


Iterator怎么使用？有什么特点？
Iterator使用代码如下：
@Test
    public void  test(){
        List< String > list = new ArrayList<>();
        Iterator< String > it = list.iterator();
        while(it.hasNext()){
            String next = it.next();
            System.out.println(next);
        }
    }
Iterator的特点是只能单向遍历，但是更加安全，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛出ConcurrentModificationException异常。



如何边遍历边移除Collection中的元素?
边遍历边修改Collection的唯一正确方式是使用Iterator.remove()方法，如 下：
lterator<lnteger> it = list.iterator()；
while(it.hasNext()){
*// do something*
it.remove();
}
一种最常见的错误代码如下：
for(lnteger i: list){
list.remove(i)
}
运行以上错误代码会报ConcurrentModificationException异常。这是因为 当使用foreach(for(lnteger i: list))语句时，会自动生成一个Iterator来遍历该list,但同时该list正在被Iterator.remove()修改。Java不允许一个线程在遍历Collection时另一个线程修改它。




Iterator 和 Listiterator 有什么区别？
Iterator可以遍历Set和List集合，而Listiterator只能遍历List。
Iterator只能单向遍历，而Listiterator可以双向遍历(向前/后遍历)。
Listiterator实现Iterator接口，然后添加了一些额外的功能，比如添加元素、替换T元素、获取前面或后面元素的索引位置。



说一下ArrayList的优缺点
ArrayList的优点如下:
ArrayList底层以数组实现，是一种随机访问模式。ArrayList实现了RandomAccess接口（标记接口），因此查找的时候非常快。
ArrayList在顺序添加一个元素的时候非常方便。
ArrayList的缺点如下：
删除元素的时候，需要做一次元素复制操作。如果要复制的元素很多，那么 就会非常耗费性能。
插入元素的时候，也要做一次元察复制操作，缺点同上。
ArrayList比较适合顺序添加、随机访问的场景。


如何实现数组和List之间的转换？
数组转List:使用Arrays. asList(array)进行转换。
List转数组：使用List自带的toArray()方法。
代码示例：
@Test
    public void test() {
        // list to array
        List<String> list = new ArrayList<>();
        list.add("123");
        list.add("456");
        list.toArray();
        // array to list
        String[] array = new String[]{"123", "456"};
        Arrays.asList(array);
    }



ArrayList和LinkedList的区别是什么?
数据结构实现：ArrayList是动态数组的数据结构实现，而LinkedList是双向链表的数据结构实现。
随机访问效率：ArrayList比LinkedList在随机访问的时候效率要高，因为 LinkedList是线性的数据存储方式，所以需要移动指针从前往后依次查找。
増加和删除效率：在非首尾的増加和删除操作，LinkedList要比ArrayList效率要高，因为ArrayList増删操作要影响数组内的其他数据的下标。
内存空间占用：LinkedList比ArrayList更占内存，因为LinkedList的节点除了存储数据，还存储了两个引用，一个指向前续元素，一个指向后继元素。
线程安全：ArrayList和LinkedList都是不同步的，也就是不保证线程安全；
综合来说，在需要频繁读取集合中的元素时，更推荐使用ArrayList,而在插入 和删除操作较多时，更推荐使用LinkedList.
LinkedList的双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。



ArrayList和Vector的区别是什么？
这两个类都实现了 List接口 （List接口继承了 Collection接口），他们都是有序集合
线程安全：Vector使用了 Synchronized来实现线程同步，是线程安全的， 而ArrayList是非线程安全的。
性能：ArrayList在性能方面要优于Vector。
扩容：ArrayList和Vector都会根据实际的需要动态的调整容量，只不过 在Vector扩容每次会増加1倍，而ArrayList只会増加50%。
Vector类的所有方法都是同步的。可以由两个线程安全地访问一个Vector对象、 但是 f一个线程访问Vector的话代码要在同步操作上耗费大量的时间。
Arraylist不是同步的，所以在不需要保证线程安全时时建议使用Arraylist。

插入数据时，ArrayList、LinkedList、Vector 谁速度较快？阐述 ArrayList、Vector、LinkedList的存储性能和特性？
ArrayList和Vector底层的实现都是使用数组方式存储数据。数组元素数大于实际存储的数据以便増加和插入元素，它们都允许直接按序号索引元素，但是插 入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢。
Vector中的方法由于加了 synchronized修饰，因此Vector是线程安全容器，但性能上较ArrayList差。
LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历， 但插入数据时只需要记录当前项的前后项即可，所以LinkedList插入速度较快。



多线程场景下如何使用ArrayList?
ArrayList不是线程安全的，如果遇到多线程场景，可以通过Collections的 synchronizedList方法将其转换成线程安全的容器后再使用。例如像下面这样：
List<String> synchronizedList = Collections.synchronizedList(list); 
synchronizedList.add("aaa');
synchronizedList.add('bbbB);
for (int i = 0; i < synchronizedList.size()； i++) {
System.out.println(synchronizedList.get(i));
}


为什么 ArrayList 的 elementData 加上 transient 修饰?
ArrayList中的数组定义如下:
private transient Object[] elementData;
再看一下ArrayList的定义:
public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable
可以看到ArrayList实现了 Serializable接口，这意味着ArrayList支持序列化。transient的作用是说不希望elementData数组被序列化，重写了 writeObject 实现：
 private void writeObject(java.io.ObjectOutputStream s)
        throws java.io.IOException{
        // Write out element count, and any hidden stuff
        int expectedModCount = modCount;
        s.defaultWriteObject();

        // Write out size as capacity for behavioural compatibility with clone()
        s.writeInt(size);

        // Write out all elements in the proper order.
        for (int i=0; i<size; i++) {
            s.writeObject(elementData[i]);
        }

        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
    }
每次序列化时，先调用defaultWriteObject()方法序列化ArrayList中的非transient元素，然后遍历elementData,只序列化已存入的元素，这样既加快了序列化的速度，又减小了序列化之后的文件大小。



List和Set的区别
List, Set都是继承自Collection接口
List特点：一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可 以重亀 可以插入多个null元素，元素都有索引。常用的实现类有ArrayList、 LinkedList 和 Vectoro
Set特点：一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元 素，只允许存入f null元素，必须保证元素唯一性, Set接口常用实现类是 HashSet、LinkedHashSet 以及 TreeSet
另外List支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set 只能用迭代，因为他无序，无法用下标来取得想要的值。
Set和List对比
Set:检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位 置改变。
List:和数组类似，List可以动态増长，查找元素效率高，插入删除元素效 率低，因为会引起其他元素位置改变



说一下HashSet的实现原理？
HashSet是基于HashMap实现的，HashSet的值存放于HashMap的key 上，HashMap的value统一为present,因此HashSet的实现比较简单，相关HashSet的操作，基本上都是直接调用底层HashMap的相关方法来完成,HashSet不允许重复的值。


HashSet如何检查重复？ HashSet是如何保证数据不可重复的？
向HashSet中add()元素时，判断元素是否存在的依据，不仅要比较hash值， 同时还要结合equles方法比较。
HashSet中的add()方法会使用HashMap的put()方法。
HashMap的key是唯一的，由源码可以看出HashSet添加进去的值就是作 为HashMap的key,并且在HashMap中如果K/V相同时，会用新的V覆盖掉旧的V,然后返回旧的V。所以不会重复（HashMap比较key是否相等是 先比较hashcode再比较equals ）。
以下是HashSet部分源码：
 private static final Object PRESENT = new Object();
private transient HashMap<E,Object> map;
public HashSet() {
        map = new HashMap<>();
    }

hashCode ()与 equals ()的相关规定:
1、如果两个对象相等，则hashcode 一定也是相同的。hashcode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值
2、两个对象相等，对两个equals方法返回true
3、两个对象有相同的hashcode值，它们也不一定是相等的
4、综上，equals方法被覆盖过，则hashCode方法也必须被覆盖
5、hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode(),则该class的两个对象无论如何都不会相等(即使这两个对象指向 相同的数据)
==与equals的区别
1、==是判断两个变量或实例是不是指向同一个内存空间；equals是判断两个变量或实例所指向的内存空间的值是不是相同
2、==是指对内存地址进行比较equals()是对字符串的内容进行比较
